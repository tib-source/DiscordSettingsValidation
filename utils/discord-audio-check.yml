---
- name: Ensure pod is defined
  fail:
    msg: pod is not defined
  when: pod is undefined

- name: Read and parse existing MediaJson
  slurp:
    src: '{{ playbook_dir }}/files/db_output/{{ pod }}.json'  # Use `pod` variable instead of `{{pod}}`
  register: discord_json
  ignore_errors: true


- name: Parse JSON content
  set_fact:
    discord_settings: "{{ discord_json['content'] | b64decode | from_json }}"


- name: Define checks
  set_fact:
    # Define the checks (no change needed here)
    checks:
      - { name: 'attenuation', condition: '0', value: '{{discord_settings.default.attenuation}}' }
      - { name: 'vadUseKrisp', condition: true, value: '{{discord_settings.default.modeOptions.vadUseKrisp}}' }
      - { name: 'autoThreshold', condition: true, value: '{{discord_settings.default.modeOptions.autoThreshold}}' }
      # - { name: 'openH264', condition: true, value: '{{discord_settings.default.openH264}}' }
      - { name: 'noiseCancellation', condition: true, value: '{{discord_settings.default.noiseCancellation}}' }
  

- name: Check if conditions are met
  assert:
    that:
      - check.value == check.condition 
    fail_msg: "{{pod}}: {{check.name}} is set to: {{ check.value }}, expected: {{check.condition}}"
    success_msg: "{{pod}}: {{check.name}} is set to: {{ check.value }}"
  loop: "{{checks}}"
  loop_control:
    loop_var: check
  register:
    discord_checks
  ignore_errors: yes

# - name: Print the value of the loop variable during assertions
#   debug:
#     msg: "Checking: {{ check }}"
#   loop: "{{ discord_checks.results }}"
#   loop_control:
#     loop_var: check

- name: Show notifications for failed checks
  include_role:
    name: notifications
  vars:
    body_message: "{{check.check.name}} is set to {{check.check.value}}"
    urgency: "medium"
  loop: "{{ discord_checks.results }}"
  loop_control:
    loop_var: check
  when:  check.failed
